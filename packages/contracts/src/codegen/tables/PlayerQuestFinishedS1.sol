// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

library PlayerQuestFinishedS1 {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "PlayerQuestFinis", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000506c61796572517565737446696e6973);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0008080001010101010101010000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address)
  Schema constant _keySchema = Schema.wrap(0x0014010061000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, bool, bool, bool, bool, bool, bool, bool)
  Schema constant _valueSchema = Schema.wrap(0x0008080060606060606060600000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "playerAddress";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "checkin";
    fieldNames[1] = "login";
    fieldNames[2] = "gather";
    fieldNames[3] = "common";
    fieldNames[4] = "rare";
    fieldNames[5] = "mystical";
    fieldNames[6] = "artifact";
    fieldNames[7] = "god";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get checkin.
   */
  function getCheckin(address playerAddress) internal view returns (bool checkin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get checkin.
   */
  function _getCheckin(address playerAddress) internal view returns (bool checkin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set checkin.
   */
  function setCheckin(address playerAddress, bool checkin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((checkin)), _fieldLayout);
  }

  /**
   * @notice Set checkin.
   */
  function _setCheckin(address playerAddress, bool checkin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((checkin)), _fieldLayout);
  }

  /**
   * @notice Get login.
   */
  function getLogin(address playerAddress) internal view returns (bool login) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get login.
   */
  function _getLogin(address playerAddress) internal view returns (bool login) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set login.
   */
  function setLogin(address playerAddress, bool login) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((login)), _fieldLayout);
  }

  /**
   * @notice Set login.
   */
  function _setLogin(address playerAddress, bool login) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((login)), _fieldLayout);
  }

  /**
   * @notice Get gather.
   */
  function getGather(address playerAddress) internal view returns (bool gather) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get gather.
   */
  function _getGather(address playerAddress) internal view returns (bool gather) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set gather.
   */
  function setGather(address playerAddress, bool gather) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((gather)), _fieldLayout);
  }

  /**
   * @notice Set gather.
   */
  function _setGather(address playerAddress, bool gather) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((gather)), _fieldLayout);
  }

  /**
   * @notice Get common.
   */
  function getCommon(address playerAddress) internal view returns (bool common) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get common.
   */
  function _getCommon(address playerAddress) internal view returns (bool common) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set common.
   */
  function setCommon(address playerAddress, bool common) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((common)), _fieldLayout);
  }

  /**
   * @notice Set common.
   */
  function _setCommon(address playerAddress, bool common) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((common)), _fieldLayout);
  }

  /**
   * @notice Get rare.
   */
  function getRare(address playerAddress) internal view returns (bool rare) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get rare.
   */
  function _getRare(address playerAddress) internal view returns (bool rare) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set rare.
   */
  function setRare(address playerAddress, bool rare) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((rare)), _fieldLayout);
  }

  /**
   * @notice Set rare.
   */
  function _setRare(address playerAddress, bool rare) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((rare)), _fieldLayout);
  }

  /**
   * @notice Get mystical.
   */
  function getMystical(address playerAddress) internal view returns (bool mystical) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get mystical.
   */
  function _getMystical(address playerAddress) internal view returns (bool mystical) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set mystical.
   */
  function setMystical(address playerAddress, bool mystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((mystical)), _fieldLayout);
  }

  /**
   * @notice Set mystical.
   */
  function _setMystical(address playerAddress, bool mystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((mystical)), _fieldLayout);
  }

  /**
   * @notice Get artifact.
   */
  function getArtifact(address playerAddress) internal view returns (bool artifact) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get artifact.
   */
  function _getArtifact(address playerAddress) internal view returns (bool artifact) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set artifact.
   */
  function setArtifact(address playerAddress, bool artifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((artifact)), _fieldLayout);
  }

  /**
   * @notice Set artifact.
   */
  function _setArtifact(address playerAddress, bool artifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((artifact)), _fieldLayout);
  }

  /**
   * @notice Get god.
   */
  function getGod(address playerAddress) internal view returns (bool god) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get god.
   */
  function _getGod(address playerAddress) internal view returns (bool god) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set god.
   */
  function setGod(address playerAddress, bool god) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((god)), _fieldLayout);
  }

  /**
   * @notice Set god.
   */
  function _setGod(address playerAddress, bool god) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((god)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    address playerAddress
  )
    internal
    view
    returns (bool checkin, bool login, bool gather, bool common, bool rare, bool mystical, bool artifact, bool god)
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    address playerAddress
  )
    internal
    view
    returns (bool checkin, bool login, bool gather, bool common, bool rare, bool mystical, bool artifact, bool god)
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address playerAddress,
    bool checkin,
    bool login,
    bool gather,
    bool common,
    bool rare,
    bool mystical,
    bool artifact,
    bool god
  ) internal {
    bytes memory _staticData = encodeStatic(checkin, login, gather, common, rare, mystical, artifact, god);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address playerAddress,
    bool checkin,
    bool login,
    bool gather,
    bool common,
    bool rare,
    bool mystical,
    bool artifact,
    bool god
  ) internal {
    bytes memory _staticData = encodeStatic(checkin, login, gather, common, rare, mystical, artifact, god);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (bool checkin, bool login, bool gather, bool common, bool rare, bool mystical, bool artifact, bool god)
  {
    checkin = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    login = (_toBool(uint8(Bytes.getBytes1(_blob, 1))));

    gather = (_toBool(uint8(Bytes.getBytes1(_blob, 2))));

    common = (_toBool(uint8(Bytes.getBytes1(_blob, 3))));

    rare = (_toBool(uint8(Bytes.getBytes1(_blob, 4))));

    mystical = (_toBool(uint8(Bytes.getBytes1(_blob, 5))));

    artifact = (_toBool(uint8(Bytes.getBytes1(_blob, 6))));

    god = (_toBool(uint8(Bytes.getBytes1(_blob, 7))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  )
    internal
    pure
    returns (bool checkin, bool login, bool gather, bool common, bool rare, bool mystical, bool artifact, bool god)
  {
    (checkin, login, gather, common, rare, mystical, artifact, god) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address playerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address playerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool checkin,
    bool login,
    bool gather,
    bool common,
    bool rare,
    bool mystical,
    bool artifact,
    bool god
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(checkin, login, gather, common, rare, mystical, artifact, god);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool checkin,
    bool login,
    bool gather,
    bool common,
    bool rare,
    bool mystical,
    bool artifact,
    bool god
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(checkin, login, gather, common, rare, mystical, artifact, god);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address playerAddress) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
