// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

library PlayersActivity {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "PlayersActivity", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000506c6179657273416374697669747900);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0100080020202020202020200000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address)
  Schema constant _keySchema = Schema.wrap(0x0014010061000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x010008001f1f1f1f1f1f1f1f0000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "playerAddress";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "lastCheckin";
    fieldNames[1] = "lastLogin";
    fieldNames[2] = "lastGather";
    fieldNames[3] = "lastCommon";
    fieldNames[4] = "lastRare";
    fieldNames[5] = "lastMystical";
    fieldNames[6] = "lastArtifact";
    fieldNames[7] = "lastGod";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get lastCheckin.
   */
  function getLastCheckin(address playerAddress) internal view returns (uint256 lastCheckin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastCheckin.
   */
  function _getLastCheckin(address playerAddress) internal view returns (uint256 lastCheckin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastCheckin.
   */
  function setLastCheckin(address playerAddress, uint256 lastCheckin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((lastCheckin)), _fieldLayout);
  }

  /**
   * @notice Set lastCheckin.
   */
  function _setLastCheckin(address playerAddress, uint256 lastCheckin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((lastCheckin)), _fieldLayout);
  }

  /**
   * @notice Get lastLogin.
   */
  function getLastLogin(address playerAddress) internal view returns (uint256 lastLogin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastLogin.
   */
  function _getLastLogin(address playerAddress) internal view returns (uint256 lastLogin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastLogin.
   */
  function setLastLogin(address playerAddress, uint256 lastLogin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastLogin)), _fieldLayout);
  }

  /**
   * @notice Set lastLogin.
   */
  function _setLastLogin(address playerAddress, uint256 lastLogin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastLogin)), _fieldLayout);
  }

  /**
   * @notice Get lastGather.
   */
  function getLastGather(address playerAddress) internal view returns (uint256 lastGather) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastGather.
   */
  function _getLastGather(address playerAddress) internal view returns (uint256 lastGather) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastGather.
   */
  function setLastGather(address playerAddress, uint256 lastGather) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastGather)), _fieldLayout);
  }

  /**
   * @notice Set lastGather.
   */
  function _setLastGather(address playerAddress, uint256 lastGather) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastGather)), _fieldLayout);
  }

  /**
   * @notice Get lastCommon.
   */
  function getLastCommon(address playerAddress) internal view returns (uint256 lastCommon) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastCommon.
   */
  function _getLastCommon(address playerAddress) internal view returns (uint256 lastCommon) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastCommon.
   */
  function setLastCommon(address playerAddress, uint256 lastCommon) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((lastCommon)), _fieldLayout);
  }

  /**
   * @notice Set lastCommon.
   */
  function _setLastCommon(address playerAddress, uint256 lastCommon) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((lastCommon)), _fieldLayout);
  }

  /**
   * @notice Get lastRare.
   */
  function getLastRare(address playerAddress) internal view returns (uint256 lastRare) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastRare.
   */
  function _getLastRare(address playerAddress) internal view returns (uint256 lastRare) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastRare.
   */
  function setLastRare(address playerAddress, uint256 lastRare) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastRare)), _fieldLayout);
  }

  /**
   * @notice Set lastRare.
   */
  function _setLastRare(address playerAddress, uint256 lastRare) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastRare)), _fieldLayout);
  }

  /**
   * @notice Get lastMystical.
   */
  function getLastMystical(address playerAddress) internal view returns (uint256 lastMystical) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastMystical.
   */
  function _getLastMystical(address playerAddress) internal view returns (uint256 lastMystical) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastMystical.
   */
  function setLastMystical(address playerAddress, uint256 lastMystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((lastMystical)), _fieldLayout);
  }

  /**
   * @notice Set lastMystical.
   */
  function _setLastMystical(address playerAddress, uint256 lastMystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((lastMystical)), _fieldLayout);
  }

  /**
   * @notice Get lastArtifact.
   */
  function getLastArtifact(address playerAddress) internal view returns (uint256 lastArtifact) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastArtifact.
   */
  function _getLastArtifact(address playerAddress) internal view returns (uint256 lastArtifact) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastArtifact.
   */
  function setLastArtifact(address playerAddress, uint256 lastArtifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((lastArtifact)), _fieldLayout);
  }

  /**
   * @notice Set lastArtifact.
   */
  function _setLastArtifact(address playerAddress, uint256 lastArtifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((lastArtifact)), _fieldLayout);
  }

  /**
   * @notice Get lastGod.
   */
  function getLastGod(address playerAddress) internal view returns (uint256 lastGod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastGod.
   */
  function _getLastGod(address playerAddress) internal view returns (uint256 lastGod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastGod.
   */
  function setLastGod(address playerAddress, uint256 lastGod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((lastGod)), _fieldLayout);
  }

  /**
   * @notice Set lastGod.
   */
  function _setLastGod(address playerAddress, uint256 lastGod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((lastGod)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    address playerAddress
  )
    internal
    view
    returns (
      uint256 lastCheckin,
      uint256 lastLogin,
      uint256 lastGather,
      uint256 lastCommon,
      uint256 lastRare,
      uint256 lastMystical,
      uint256 lastArtifact,
      uint256 lastGod
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    address playerAddress
  )
    internal
    view
    returns (
      uint256 lastCheckin,
      uint256 lastLogin,
      uint256 lastGather,
      uint256 lastCommon,
      uint256 lastRare,
      uint256 lastMystical,
      uint256 lastArtifact,
      uint256 lastGod
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address playerAddress,
    uint256 lastCheckin,
    uint256 lastLogin,
    uint256 lastGather,
    uint256 lastCommon,
    uint256 lastRare,
    uint256 lastMystical,
    uint256 lastArtifact,
    uint256 lastGod
  ) internal {
    bytes memory _staticData = encodeStatic(
      lastCheckin,
      lastLogin,
      lastGather,
      lastCommon,
      lastRare,
      lastMystical,
      lastArtifact,
      lastGod
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address playerAddress,
    uint256 lastCheckin,
    uint256 lastLogin,
    uint256 lastGather,
    uint256 lastCommon,
    uint256 lastRare,
    uint256 lastMystical,
    uint256 lastArtifact,
    uint256 lastGod
  ) internal {
    bytes memory _staticData = encodeStatic(
      lastCheckin,
      lastLogin,
      lastGather,
      lastCommon,
      lastRare,
      lastMystical,
      lastArtifact,
      lastGod
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 lastCheckin,
      uint256 lastLogin,
      uint256 lastGather,
      uint256 lastCommon,
      uint256 lastRare,
      uint256 lastMystical,
      uint256 lastArtifact,
      uint256 lastGod
    )
  {
    lastCheckin = (uint256(Bytes.getBytes32(_blob, 0)));

    lastLogin = (uint256(Bytes.getBytes32(_blob, 32)));

    lastGather = (uint256(Bytes.getBytes32(_blob, 64)));

    lastCommon = (uint256(Bytes.getBytes32(_blob, 96)));

    lastRare = (uint256(Bytes.getBytes32(_blob, 128)));

    lastMystical = (uint256(Bytes.getBytes32(_blob, 160)));

    lastArtifact = (uint256(Bytes.getBytes32(_blob, 192)));

    lastGod = (uint256(Bytes.getBytes32(_blob, 224)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  )
    internal
    pure
    returns (
      uint256 lastCheckin,
      uint256 lastLogin,
      uint256 lastGather,
      uint256 lastCommon,
      uint256 lastRare,
      uint256 lastMystical,
      uint256 lastArtifact,
      uint256 lastGod
    )
  {
    (lastCheckin, lastLogin, lastGather, lastCommon, lastRare, lastMystical, lastArtifact, lastGod) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address playerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address playerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 lastCheckin,
    uint256 lastLogin,
    uint256 lastGather,
    uint256 lastCommon,
    uint256 lastRare,
    uint256 lastMystical,
    uint256 lastArtifact,
    uint256 lastGod
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(lastCheckin, lastLogin, lastGather, lastCommon, lastRare, lastMystical, lastArtifact, lastGod);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 lastCheckin,
    uint256 lastLogin,
    uint256 lastGather,
    uint256 lastCommon,
    uint256 lastRare,
    uint256 lastMystical,
    uint256 lastArtifact,
    uint256 lastGod
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      lastCheckin,
      lastLogin,
      lastGather,
      lastCommon,
      lastRare,
      lastMystical,
      lastArtifact,
      lastGod
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address playerAddress) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(playerAddress)));

    return _keyTuple;
  }
}
