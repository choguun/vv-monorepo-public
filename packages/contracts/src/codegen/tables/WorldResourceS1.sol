// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

library WorldResourceS1 {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "WorldResourceS1", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000576f726c645265736f75726365533100);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00280a0004040404040404040404000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32)
  Schema constant _valueSchema = Schema.wrap(0x00280a0003030303030303030303000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "god";
    fieldNames[1] = "artifact";
    fieldNames[2] = "mystical";
    fieldNames[3] = "rare";
    fieldNames[4] = "common";
    fieldNames[5] = "maxGod";
    fieldNames[6] = "maxArtifact";
    fieldNames[7] = "maxMystical";
    fieldNames[8] = "maxRare";
    fieldNames[9] = "maxCommon";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get god.
   */
  function getGod() internal view returns (uint32 god) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get god.
   */
  function _getGod() internal view returns (uint32 god) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set god.
   */
  function setGod(uint32 god) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((god)), _fieldLayout);
  }

  /**
   * @notice Set god.
   */
  function _setGod(uint32 god) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((god)), _fieldLayout);
  }

  /**
   * @notice Get artifact.
   */
  function getArtifact() internal view returns (uint32 artifact) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get artifact.
   */
  function _getArtifact() internal view returns (uint32 artifact) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set artifact.
   */
  function setArtifact(uint32 artifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((artifact)), _fieldLayout);
  }

  /**
   * @notice Set artifact.
   */
  function _setArtifact(uint32 artifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((artifact)), _fieldLayout);
  }

  /**
   * @notice Get mystical.
   */
  function getMystical() internal view returns (uint32 mystical) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get mystical.
   */
  function _getMystical() internal view returns (uint32 mystical) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set mystical.
   */
  function setMystical(uint32 mystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((mystical)), _fieldLayout);
  }

  /**
   * @notice Set mystical.
   */
  function _setMystical(uint32 mystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((mystical)), _fieldLayout);
  }

  /**
   * @notice Get rare.
   */
  function getRare() internal view returns (uint32 rare) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get rare.
   */
  function _getRare() internal view returns (uint32 rare) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set rare.
   */
  function setRare(uint32 rare) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((rare)), _fieldLayout);
  }

  /**
   * @notice Set rare.
   */
  function _setRare(uint32 rare) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((rare)), _fieldLayout);
  }

  /**
   * @notice Get common.
   */
  function getCommon() internal view returns (uint32 common) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get common.
   */
  function _getCommon() internal view returns (uint32 common) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set common.
   */
  function setCommon(uint32 common) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((common)), _fieldLayout);
  }

  /**
   * @notice Set common.
   */
  function _setCommon(uint32 common) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((common)), _fieldLayout);
  }

  /**
   * @notice Get maxGod.
   */
  function getMaxGod() internal view returns (uint32 maxGod) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get maxGod.
   */
  function _getMaxGod() internal view returns (uint32 maxGod) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set maxGod.
   */
  function setMaxGod(uint32 maxGod) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((maxGod)), _fieldLayout);
  }

  /**
   * @notice Set maxGod.
   */
  function _setMaxGod(uint32 maxGod) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((maxGod)), _fieldLayout);
  }

  /**
   * @notice Get maxArtifact.
   */
  function getMaxArtifact() internal view returns (uint32 maxArtifact) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get maxArtifact.
   */
  function _getMaxArtifact() internal view returns (uint32 maxArtifact) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set maxArtifact.
   */
  function setMaxArtifact(uint32 maxArtifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((maxArtifact)), _fieldLayout);
  }

  /**
   * @notice Set maxArtifact.
   */
  function _setMaxArtifact(uint32 maxArtifact) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((maxArtifact)), _fieldLayout);
  }

  /**
   * @notice Get maxMystical.
   */
  function getMaxMystical() internal view returns (uint32 maxMystical) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get maxMystical.
   */
  function _getMaxMystical() internal view returns (uint32 maxMystical) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set maxMystical.
   */
  function setMaxMystical(uint32 maxMystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((maxMystical)), _fieldLayout);
  }

  /**
   * @notice Set maxMystical.
   */
  function _setMaxMystical(uint32 maxMystical) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((maxMystical)), _fieldLayout);
  }

  /**
   * @notice Get maxRare.
   */
  function getMaxRare() internal view returns (uint32 maxRare) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get maxRare.
   */
  function _getMaxRare() internal view returns (uint32 maxRare) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set maxRare.
   */
  function setMaxRare(uint32 maxRare) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((maxRare)), _fieldLayout);
  }

  /**
   * @notice Set maxRare.
   */
  function _setMaxRare(uint32 maxRare) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((maxRare)), _fieldLayout);
  }

  /**
   * @notice Get maxCommon.
   */
  function getMaxCommon() internal view returns (uint32 maxCommon) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get maxCommon.
   */
  function _getMaxCommon() internal view returns (uint32 maxCommon) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set maxCommon.
   */
  function setMaxCommon(uint32 maxCommon) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((maxCommon)), _fieldLayout);
  }

  /**
   * @notice Set maxCommon.
   */
  function _setMaxCommon(uint32 maxCommon) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((maxCommon)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get()
    internal
    view
    returns (
      uint32 god,
      uint32 artifact,
      uint32 mystical,
      uint32 rare,
      uint32 common,
      uint32 maxGod,
      uint32 maxArtifact,
      uint32 maxMystical,
      uint32 maxRare,
      uint32 maxCommon
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get()
    internal
    view
    returns (
      uint32 god,
      uint32 artifact,
      uint32 mystical,
      uint32 rare,
      uint32 common,
      uint32 maxGod,
      uint32 maxArtifact,
      uint32 maxMystical,
      uint32 maxRare,
      uint32 maxCommon
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint32 god,
    uint32 artifact,
    uint32 mystical,
    uint32 rare,
    uint32 common,
    uint32 maxGod,
    uint32 maxArtifact,
    uint32 maxMystical,
    uint32 maxRare,
    uint32 maxCommon
  ) internal {
    bytes memory _staticData = encodeStatic(
      god,
      artifact,
      mystical,
      rare,
      common,
      maxGod,
      maxArtifact,
      maxMystical,
      maxRare,
      maxCommon
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint32 god,
    uint32 artifact,
    uint32 mystical,
    uint32 rare,
    uint32 common,
    uint32 maxGod,
    uint32 maxArtifact,
    uint32 maxMystical,
    uint32 maxRare,
    uint32 maxCommon
  ) internal {
    bytes memory _staticData = encodeStatic(
      god,
      artifact,
      mystical,
      rare,
      common,
      maxGod,
      maxArtifact,
      maxMystical,
      maxRare,
      maxCommon
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint32 god,
      uint32 artifact,
      uint32 mystical,
      uint32 rare,
      uint32 common,
      uint32 maxGod,
      uint32 maxArtifact,
      uint32 maxMystical,
      uint32 maxRare,
      uint32 maxCommon
    )
  {
    god = (uint32(Bytes.getBytes4(_blob, 0)));

    artifact = (uint32(Bytes.getBytes4(_blob, 4)));

    mystical = (uint32(Bytes.getBytes4(_blob, 8)));

    rare = (uint32(Bytes.getBytes4(_blob, 12)));

    common = (uint32(Bytes.getBytes4(_blob, 16)));

    maxGod = (uint32(Bytes.getBytes4(_blob, 20)));

    maxArtifact = (uint32(Bytes.getBytes4(_blob, 24)));

    maxMystical = (uint32(Bytes.getBytes4(_blob, 28)));

    maxRare = (uint32(Bytes.getBytes4(_blob, 32)));

    maxCommon = (uint32(Bytes.getBytes4(_blob, 36)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  )
    internal
    pure
    returns (
      uint32 god,
      uint32 artifact,
      uint32 mystical,
      uint32 rare,
      uint32 common,
      uint32 maxGod,
      uint32 maxArtifact,
      uint32 maxMystical,
      uint32 maxRare,
      uint32 maxCommon
    )
  {
    (god, artifact, mystical, rare, common, maxGod, maxArtifact, maxMystical, maxRare, maxCommon) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 god,
    uint32 artifact,
    uint32 mystical,
    uint32 rare,
    uint32 common,
    uint32 maxGod,
    uint32 maxArtifact,
    uint32 maxMystical,
    uint32 maxRare,
    uint32 maxCommon
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(god, artifact, mystical, rare, common, maxGod, maxArtifact, maxMystical, maxRare, maxCommon);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 god,
    uint32 artifact,
    uint32 mystical,
    uint32 rare,
    uint32 common,
    uint32 maxGod,
    uint32 maxArtifact,
    uint32 maxMystical,
    uint32 maxRare,
    uint32 maxCommon
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      god,
      artifact,
      mystical,
      rare,
      common,
      maxGod,
      maxArtifact,
      maxMystical,
      maxRare,
      maxCommon
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
